{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? 'https://your-backend-url.vercel.app' : 'http://localhost:5000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor untuk menambahkan token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const authAPI = {\n  login: credentials => api.post('/api/auth/login', credentials),\n  register: userData => api.post('/api/auth/register', userData),\n  getProfile: () => api.get('/api/auth/profile')\n};\nexport const postsAPI = {\n  getPosts: () => api.get('/api/posts'),\n  createPost: postData => api.post('/api/posts', postData),\n  likePost: postId => api.post(`/api/posts/${postId}/like`),\n  addComment: (postId, comment) => api.post(`/api/posts/${postId}/comments`, {\n    comment\n  })\n};\nexport const friendsAPI = {\n  getFriends: () => api.get('/api/friends'),\n  addFriend: userId => api.post('/api/friends/add', {\n    userId\n  }),\n  removeFriend: userId => api.delete(`/api/friends/${userId}`)\n};\nexport const chatAPI = {\n  getMessages: friendId => api.get(`/api/chat/${friendId}`),\n  sendMessage: (friendId, message) => api.post('/api/chat/send', {\n    friendId,\n    message\n  })\n};\nexport const adminAPI = {\n  getStats: () => api.get('/api/admin/stats'),\n  getUsers: () => api.get('/api/admin/users'),\n  deleteUser: userId => api.delete(`/api/admin/users/${userId}`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","authAPI","login","credentials","post","register","userData","getProfile","get","postsAPI","getPosts","createPost","postData","likePost","postId","addComment","comment","friendsAPI","getFriends","addFriend","userId","removeFriend","delete","chatAPI","getMessages","friendId","sendMessage","message","adminAPI","getStats","getUsers","deleteUser"],"sources":["C:/xampp/htdocs/friendchat/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \r\n  ? 'https://your-backend-url.vercel.app' \r\n  : 'http://localhost:5000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor untuk menambahkan token\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const authAPI = {\r\n  login: (credentials) => api.post('/api/auth/login', credentials),\r\n  register: (userData) => api.post('/api/auth/register', userData),\r\n  getProfile: () => api.get('/api/auth/profile'),\r\n};\r\n\r\nexport const postsAPI = {\r\n  getPosts: () => api.get('/api/posts'),\r\n  createPost: (postData) => api.post('/api/posts', postData),\r\n  likePost: (postId) => api.post(`/api/posts/${postId}/like`),\r\n  addComment: (postId, comment) => api.post(`/api/posts/${postId}/comments`, { comment }),\r\n};\r\n\r\nexport const friendsAPI = {\r\n  getFriends: () => api.get('/api/friends'),\r\n  addFriend: (userId) => api.post('/api/friends/add', { userId }),\r\n  removeFriend: (userId) => api.delete(`/api/friends/${userId}`),\r\n};\r\n\r\nexport const chatAPI = {\r\n  getMessages: (friendId) => api.get(`/api/chat/${friendId}`),\r\n  sendMessage: (friendId, message) => api.post('/api/chat/send', { friendId, message }),\r\n};\r\n\r\nexport const adminAPI = {\r\n  getStats: () => api.get('/api/admin/stats'),\r\n  getUsers: () => api.get('/api/admin/users'),\r\n  deleteUser: (userId) => api.delete(`/api/admin/users/${userId}`),\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACtD,qCAAqC,GACrC,uBAAuB;AAE3B,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMK,OAAO,GAAG;EACrBC,KAAK,EAAGC,WAAW,IAAKd,GAAG,CAACe,IAAI,CAAC,iBAAiB,EAAED,WAAW,CAAC;EAChEE,QAAQ,EAAGC,QAAQ,IAAKjB,GAAG,CAACe,IAAI,CAAC,oBAAoB,EAAEE,QAAQ,CAAC;EAChEC,UAAU,EAAEA,CAAA,KAAMlB,GAAG,CAACmB,GAAG,CAAC,mBAAmB;AAC/C,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG;EACtBC,QAAQ,EAAEA,CAAA,KAAMrB,GAAG,CAACmB,GAAG,CAAC,YAAY,CAAC;EACrCG,UAAU,EAAGC,QAAQ,IAAKvB,GAAG,CAACe,IAAI,CAAC,YAAY,EAAEQ,QAAQ,CAAC;EAC1DC,QAAQ,EAAGC,MAAM,IAAKzB,GAAG,CAACe,IAAI,CAAC,cAAcU,MAAM,OAAO,CAAC;EAC3DC,UAAU,EAAEA,CAACD,MAAM,EAAEE,OAAO,KAAK3B,GAAG,CAACe,IAAI,CAAC,cAAcU,MAAM,WAAW,EAAE;IAAEE;EAAQ,CAAC;AACxF,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG;EACxBC,UAAU,EAAEA,CAAA,KAAM7B,GAAG,CAACmB,GAAG,CAAC,cAAc,CAAC;EACzCW,SAAS,EAAGC,MAAM,IAAK/B,GAAG,CAACe,IAAI,CAAC,kBAAkB,EAAE;IAAEgB;EAAO,CAAC,CAAC;EAC/DC,YAAY,EAAGD,MAAM,IAAK/B,GAAG,CAACiC,MAAM,CAAC,gBAAgBF,MAAM,EAAE;AAC/D,CAAC;AAED,OAAO,MAAMG,OAAO,GAAG;EACrBC,WAAW,EAAGC,QAAQ,IAAKpC,GAAG,CAACmB,GAAG,CAAC,aAAaiB,QAAQ,EAAE,CAAC;EAC3DC,WAAW,EAAEA,CAACD,QAAQ,EAAEE,OAAO,KAAKtC,GAAG,CAACe,IAAI,CAAC,gBAAgB,EAAE;IAAEqB,QAAQ;IAAEE;EAAQ,CAAC;AACtF,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG;EACtBC,QAAQ,EAAEA,CAAA,KAAMxC,GAAG,CAACmB,GAAG,CAAC,kBAAkB,CAAC;EAC3CsB,QAAQ,EAAEA,CAAA,KAAMzC,GAAG,CAACmB,GAAG,CAAC,kBAAkB,CAAC;EAC3CuB,UAAU,EAAGX,MAAM,IAAK/B,GAAG,CAACiC,MAAM,CAAC,oBAAoBF,MAAM,EAAE;AACjE,CAAC;AAED,eAAe/B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}