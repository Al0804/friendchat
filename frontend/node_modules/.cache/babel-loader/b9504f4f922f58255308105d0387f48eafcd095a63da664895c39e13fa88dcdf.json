{"ast":null,"code":"const API_BASE_URL = process.env.NODE_ENV === 'production' ? 'https://your-backend-url.vercel.app' : 'http://localhost:5000';\n\n// Create axios instance (if using axios in production)\nconst createApiClient = () => {\n  if (typeof window !== 'undefined' && window.axios) {\n    const api = window.axios.create({\n      baseURL: API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Interceptor untuk menambahkan token\n    api.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n    return api;\n  }\n  return null;\n};\n\n// Fallback fetch implementation\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  const headers = {\n    'Content-Type': 'application/json',\n    ...(token && {\n      'Authorization': `Bearer ${token}`\n    }),\n    ...options.headers\n  };\n  const config = {\n    ...options,\n    headers\n  };\n  if (config.data) {\n    config.body = JSON.stringify(config.data);\n    delete config.data;\n  }\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({\n      message: 'Network error'\n    }));\n    throw new Error(error.message || 'API request failed');\n  }\n  return response.json();\n};\n\n// Auth API\nexport const authAPI = {\n  login: async credentials => {\n    const api = createApiClient();\n    if (api) {\n      return api.post('/api/auth/login', credentials);\n    }\n    return {\n      data: await apiRequest('/api/auth/login', {\n        method: 'POST',\n        data: credentials\n      })\n    };\n  },\n  register: async userData => {\n    const api = createApiClient();\n    if (api) {\n      return api.post('/api/auth/register', userData);\n    }\n    return {\n      data: await apiRequest('/api/auth/register', {\n        method: 'POST',\n        data: userData\n      })\n    };\n  },\n  getProfile: async () => {\n    const api = createApiClient();\n    if (api) {\n      return api.get('/api/auth/profile');\n    }\n    return {\n      data: await apiRequest('/api/auth/profile', {\n        method: 'GET'\n      })\n    };\n  },\n  updateProfile: async profileData => {\n    const api = createApiClient();\n    if (api) {\n      return api.put('/api/auth/profile', profileData);\n    }\n    return {\n      data: await apiRequest('/api/auth/profile', {\n        method: 'PUT',\n        data: profileData\n      })\n    };\n  }\n};\n\n// Posts API\nexport const postsAPI = {\n  getPosts: async () => {\n    const api = createApiClient();\n    if (api) {\n      return api.get('/api/posts');\n    }\n    return {\n      data: await apiRequest('/api/posts', {\n        method: 'GET'\n      })\n    };\n  },\n  createPost: async postData => {\n    const api = createApiClient();\n    if (api) {\n      return api.post('/api/posts', postData);\n    }\n    return {\n      data: await apiRequest('/api/posts', {\n        method: 'POST',\n        data: postData\n      })\n    };\n  },\n  likePost: async postId => {\n    const api = createApiClient();\n    if (api) {\n      return api.post(`/api/posts/${postId}/like`);\n    }\n    return {\n      data: await apiRequest(`/api/posts/${postId}/like`, {\n        method: 'POST'\n      })\n    };\n  },\n  addComment: async (postId, commentData) => {\n    const api = createApiClient();\n    if (api) {\n      return api.post(`/api/posts/${postId}/comments`, commentData);\n    }\n    return {\n      data: await apiRequest(`/api/posts/${postId}/comments`, {\n        method: 'POST',\n        data: commentData\n      })\n    };\n  }\n};\n\n// Friends API\nexport const friendsAPI = {\n  getFriends: async () => {\n    const api = createApiClient();\n    if (api) {\n      return api.get('/api/friends');\n    }\n    return {\n      data: await apiRequest('/api/friends', {\n        method: 'GET'\n      })\n    };\n  },\n  addFriend: async userId => {\n    const api = createApiClient();\n    if (api) {\n      return api.post('/api/friends/add', {\n        userId\n      });\n    }\n    return {\n      data: await apiRequest('/api/friends/add', {\n        method: 'POST',\n        data: {\n          userId\n        }\n      })\n    };\n  },\n  removeFriend: async userId => {\n    const api = createApiClient();\n    if (api) {\n      return api.delete(`/api/friends/${userId}`);\n    }\n    return {\n      data: await apiRequest(`/api/friends/${userId}`, {\n        method: 'DELETE'\n      })\n    };\n  },\n  searchUsers: async query => {\n    const api = createApiClient();\n    if (api) {\n      return api.get(`/api/friends/search?q=${encodeURIComponent(query)}`);\n    }\n    return {\n      data: await apiRequest(`/api/friends/search?q=${encodeURIComponent(query)}`, {\n        method: 'GET'\n      })\n    };\n  }\n};\n\n// Chat API\nexport const chatAPI = {\n  getMessages: async friendId => {\n    const api = createApiClient();\n    if (api) {\n      return api.get(`/api/chat/${friendId}`);\n    }\n    return {\n      data: await apiRequest(`/api/chat/${friendId}`, {\n        method: 'GET'\n      })\n    };\n  },\n  sendMessage: async (friendId, messageData) => {\n    const api = createApiClient();\n    if (api) {\n      return api.post('/api/chat/send', {\n        friendId,\n        ...messageData\n      });\n    }\n    return {\n      data: await apiRequest('/api/chat/send', {\n        method: 'POST',\n        data: {\n          friendId,\n          ...messageData\n        }\n      })\n    };\n  }\n};\n\n// Admin API\nexport const adminAPI = {\n  getStats: async () => {\n    const api = createApiClient();\n    if (api) {\n      return api.get('/api/admin/stats');\n    }\n    return {\n      data: await apiRequest('/api/admin/stats', {\n        method: 'GET'\n      })\n    };\n  },\n  getUsers: async () => {\n    const api = createApiClient();\n    if (api) {\n      return api.get('/api/admin/users');\n    }\n    return {\n      data: await apiRequest('/api/admin/users', {\n        method: 'GET'\n      })\n    };\n  },\n  deleteUser: async userId => {\n    const api = createApiClient();\n    if (api) {\n      return api.delete(`/api/admin/users/${userId}`);\n    }\n    return {\n      data: await apiRequest(`/api/admin/users/${userId}`, {\n        method: 'DELETE'\n      })\n    };\n  }\n};\n\n// File upload helper\nexport const uploadFile = async (file, type = 'image') => {\n  const formData = new FormData();\n  formData.append('file', file);\n  formData.append('type', type);\n  const token = localStorage.getItem('token');\n  const response = await fetch(`${API_BASE_URL}/api/upload`, {\n    method: 'POST',\n    headers: {\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      })\n    },\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error('File upload failed');\n  }\n  return response.json();\n};\n\n// Export default object for backward compatibility\nconst api = {\n  auth: authAPI,\n  posts: postsAPI,\n  friends: friendsAPI,\n  chat: chatAPI,\n  admin: adminAPI,\n  upload: uploadFile\n};\nexport default api;","map":{"version":3,"names":["API_BASE_URL","process","env","NODE_ENV","createApiClient","window","axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","apiRequest","endpoint","options","data","body","JSON","stringify","response","fetch","ok","error","json","catch","message","Error","authAPI","login","credentials","post","method","register","userData","getProfile","get","updateProfile","profileData","put","postsAPI","getPosts","createPost","postData","likePost","postId","addComment","commentData","friendsAPI","getFriends","addFriend","userId","removeFriend","delete","searchUsers","query","encodeURIComponent","chatAPI","getMessages","friendId","sendMessage","messageData","adminAPI","getStats","getUsers","deleteUser","uploadFile","file","type","formData","FormData","append","auth","posts","friends","chat","admin","upload"],"sources":["C:/xampp/htdocs/friendchat/frontend/src/api.js"],"sourcesContent":["const API_BASE_URL = process.env.NODE_ENV === 'production' \r\n  ? 'https://your-backend-url.vercel.app' \r\n  : 'http://localhost:5000';\r\n\r\n// Create axios instance (if using axios in production)\r\nconst createApiClient = () => {\r\n  if (typeof window !== 'undefined' && window.axios) {\r\n    const api = window.axios.create({\r\n      baseURL: API_BASE_URL,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Interceptor untuk menambahkan token\r\n    api.interceptors.request.use((config) => {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n      return config;\r\n    });\r\n\r\n    return api;\r\n  }\r\n  return null;\r\n};\r\n\r\n// Fallback fetch implementation\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const token = localStorage.getItem('token');\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    ...(token && { 'Authorization': `Bearer ${token}` }),\r\n    ...options.headers\r\n  };\r\n\r\n  const config = {\r\n    ...options,\r\n    headers\r\n  };\r\n\r\n  if (config.data) {\r\n    config.body = JSON.stringify(config.data);\r\n    delete config.data;\r\n  }\r\n\r\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\r\n  \r\n  if (!response.ok) {\r\n    const error = await response.json().catch(() => ({ message: 'Network error' }));\r\n    throw new Error(error.message || 'API request failed');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  login: async (credentials) => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.post('/api/auth/login', credentials);\r\n    }\r\n    return { data: await apiRequest('/api/auth/login', { method: 'POST', data: credentials }) };\r\n  },\r\n\r\n  register: async (userData) => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.post('/api/auth/register', userData);\r\n    }\r\n    return { data: await apiRequest('/api/auth/register', { method: 'POST', data: userData }) };\r\n  },\r\n\r\n  getProfile: async () => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.get('/api/auth/profile');\r\n    }\r\n    return { data: await apiRequest('/api/auth/profile', { method: 'GET' }) };\r\n  },\r\n\r\n  updateProfile: async (profileData) => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.put('/api/auth/profile', profileData);\r\n    }\r\n    return { data: await apiRequest('/api/auth/profile', { method: 'PUT', data: profileData }) };\r\n  }\r\n};\r\n\r\n// Posts API\r\nexport const postsAPI = {\r\n  getPosts: async () => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.get('/api/posts');\r\n    }\r\n    return { data: await apiRequest('/api/posts', { method: 'GET' }) };\r\n  },\r\n\r\n  createPost: async (postData) => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.post('/api/posts', postData);\r\n    }\r\n    return { data: await apiRequest('/api/posts', { method: 'POST', data: postData }) };\r\n  },\r\n\r\n  likePost: async (postId) => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.post(`/api/posts/${postId}/like`);\r\n    }\r\n    return { data: await apiRequest(`/api/posts/${postId}/like`, { method: 'POST' }) };\r\n  },\r\n\r\n  addComment: async (postId, commentData) => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.post(`/api/posts/${postId}/comments`, commentData);\r\n    }\r\n    return { data: await apiRequest(`/api/posts/${postId}/comments`, { method: 'POST', data: commentData }) };\r\n  }\r\n};\r\n\r\n// Friends API\r\nexport const friendsAPI = {\r\n  getFriends: async () => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.get('/api/friends');\r\n    }\r\n    return { data: await apiRequest('/api/friends', { method: 'GET' }) };\r\n  },\r\n\r\n  addFriend: async (userId) => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.post('/api/friends/add', { userId });\r\n    }\r\n    return { data: await apiRequest('/api/friends/add', { method: 'POST', data: { userId } }) };\r\n  },\r\n\r\n  removeFriend: async (userId) => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.delete(`/api/friends/${userId}`);\r\n    }\r\n    return { data: await apiRequest(`/api/friends/${userId}`, { method: 'DELETE' }) };\r\n  },\r\n\r\n  searchUsers: async (query) => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.get(`/api/friends/search?q=${encodeURIComponent(query)}`);\r\n    }\r\n    return { data: await apiRequest(`/api/friends/search?q=${encodeURIComponent(query)}`, { method: 'GET' }) };\r\n  }\r\n};\r\n\r\n// Chat API\r\nexport const chatAPI = {\r\n  getMessages: async (friendId) => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.get(`/api/chat/${friendId}`);\r\n    }\r\n    return { data: await apiRequest(`/api/chat/${friendId}`, { method: 'GET' }) };\r\n  },\r\n\r\n  sendMessage: async (friendId, messageData) => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.post('/api/chat/send', { friendId, ...messageData });\r\n    }\r\n    return { data: await apiRequest('/api/chat/send', { method: 'POST', data: { friendId, ...messageData } }) };\r\n  }\r\n};\r\n\r\n// Admin API\r\nexport const adminAPI = {\r\n  getStats: async () => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.get('/api/admin/stats');\r\n    }\r\n    return { data: await apiRequest('/api/admin/stats', { method: 'GET' }) };\r\n  },\r\n\r\n  getUsers: async () => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.get('/api/admin/users');\r\n    }\r\n    return { data: await apiRequest('/api/admin/users', { method: 'GET' }) };\r\n  },\r\n\r\n  deleteUser: async (userId) => {\r\n    const api = createApiClient();\r\n    if (api) {\r\n      return api.delete(`/api/admin/users/${userId}`);\r\n    }\r\n    return { data: await apiRequest(`/api/admin/users/${userId}`, { method: 'DELETE' }) };\r\n  }\r\n};\r\n\r\n// File upload helper\r\nexport const uploadFile = async (file, type = 'image') => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  formData.append('type', type);\r\n\r\n  const token = localStorage.getItem('token');\r\n  const response = await fetch(`${API_BASE_URL}/api/upload`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...(token && { 'Authorization': `Bearer ${token}` })\r\n    },\r\n    body: formData\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('File upload failed');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Export default object for backward compatibility\r\nconst api = {\r\n  auth: authAPI,\r\n  posts: postsAPI,\r\n  friends: friendsAPI,\r\n  chat: chatAPI,\r\n  admin: adminAPI,\r\n  upload: uploadFile\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}